{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"iOS private(set) - Getters and Setters","text":"<p>You assign a lower access level by writing <code>private(set)</code>.</p> <p>Its work like \"Public getter and Private setter\"</p> <pre><code>//MARK:- Foo\nclass Foo {\n    private var name: String\n    private var ID: String\n\n    //initialize\n    init(name:String, ID:String){\n        self.name = name\n        self.ID = ID\n    }\n}\n</code></pre>"},{"location":"#_1","title":"iOS private(set) - Getters and Setters","text":"<p>We will end with error, when to try to access <code>private</code> variable.</p>"},{"location":"#_2","title":"iOS private(set) - Getters and Setters","text":"<p>But we can access with new and awesome way to do this in a single line.</p> <p>Then change <code>private</code> access level to <code>private(set)</code></p> <pre><code>//MARK:- Foo\nclass Foo {\n    private(set) var name: String\n    private var ID: String\n\n    //initialize\n    init(name:String, ID:String){\n        self.name = name\n        self.ID = ID    \n    }\n}\n</code></pre>"},{"location":"#_3","title":"iOS private(set) - Getters and Setters","text":"<p>So you can easy access the <code>private</code> variable, constant, property, or subscript.</p> <pre><code>//Access class value from Foo\nlet fooObjc = Foo.init(name: \"test\", ID: \"9900\")\nprint(fooObjc.name)\n</code></pre>"},{"location":"#_4","title":"iOS private(set) - Getters and Setters","text":"<p>Try to use with <pre><code>fileprivate(set)\nprivate(set)\ninternal(set) \n</code></pre></p>"},{"location":"#_5","title":"iOS private(set) - Getters and Setters","text":"<p>to change the access level of this synthesized setter in exactly the same way as for an explicit setter in a computed property.</p> <p>Tip</p> <p>\"This property can be read, but cannot be set from the outside\"</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":""},{"location":"about/#sivabalaa-jothibose","title":"Sivabalaa Jothibose","text":"<p>iOS Developer\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb - 10 Years of Experience</p> <p>Learning website to know some internal concepts of iOS development.</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/AppVersionBuildNumber/","title":"iOS Get App Version &amp; Build Number","text":"<p>You can declare globally to get appVersion any where.</p>"},{"location":"home/AppVersionBuildNumber/#swift","title":"Swift:","text":"<pre><code>//MARK:- appVersion\npublic var appVersion: String {\n    //versionNumber\n    let versionNumber = Bundle.main.object(forInfoDictionaryKey: \"CFBundleShortVersionString\") ?? \"1.0\"\n    //buildNumber\n    let buildNumber = Bundle.main.object(forInfoDictionaryKey: \"CFBundleVersion\") ?? \"1.0\"\n    return \"Version: #\\(versionNumber) (#\\(buildNumber))\"\n}\n</code></pre> <pre><code>print(appVersion)\n</code></pre>"},{"location":"home/AppVersionBuildNumber/#_1","title":"iOS Get App Version &amp; Build Number","text":""},{"location":"home/AppVersionBuildNumber/#output","title":"Output:","text":"<p><pre><code>Version: #1.0 (#1.0.3)\n</code></pre> Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/AssociatedTypeProtocol/","title":"iOS Protocols with Associated Type","text":"<p>You have come accross protocol &amp; it's functionalities, you will be addicted to it.</p> <p>Now we will learn about <code>associatedtype</code> in protocol.</p> <pre><code>protocol Details {\n var property: String { get set }\n}\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_1","title":"iOS Protocols with Associated Type","text":"<p>We can create <code>class</code> as Person</p> <pre><code>class Person: Details {\n    var property = \"iOS Developer\"\n}\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_2","title":"iOS Protocols with Associated Type","text":"<p>You can just call like </p> <pre><code>let person = Person()\nprint(person.property)\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_3","title":"iOS Protocols with Associated Type","text":""},{"location":"home/AssociatedTypeProtocol/#output","title":"Output:","text":"<pre><code>iOS Developer\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_4","title":"iOS Protocols with Associated Type","text":"<p><code>protocol</code> forces <code>class</code>/<code>struct</code> to work with <code>String</code>. But, what if you want property to be <code>Int</code> or <code>Bool</code>.</p> <p>For this swift has introduced Protocol Associated Types.</p> <p>In General we can create <code>struct</code> as generic type , <pre><code>struct GenericStruct&lt;T&gt; {\n var property: T?\n}\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_5","title":"iOS Protocols with Associated Type","text":"<pre><code>let explictStruct = GenericStruct&lt;Bool&gt;()\n// T is Bool\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_6","title":"iOS Protocols with Associated Type","text":"<pre><code>let implicitStruct = GenericStruct(property: \"iOS Developer\")\n// T is String\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_7","title":"iOS Protocols with Associated Type","text":"<p>But when you come to <code>protocol</code> we have to use <code>associatedtype</code>.</p> <p>Let try with above <code>Details</code> example:</p> <pre><code>protocol Details {\n associatedtype anyType\n var property: anyType { get set }\n}\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_8","title":"iOS Protocols with Associated Type","text":"<p>\"Associated type = type alias + generics\"</p> <pre><code>class Person: Details {\n    var property = \"iOS Developer\"\n}\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_9","title":"iOS Protocols with Associated Type","text":"<p>also you can create a <code>class</code>/<code>struct</code> with some other datatype.</p> <pre><code>struct Person1: Details {\n    var property = 2020\n}\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_10","title":"iOS Protocols with Associated Type","text":"<p>Now you can just call</p> <pre><code>let person = Person()\nprint(person.property)\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_11","title":"iOS Protocols with Associated Type","text":""},{"location":"home/AssociatedTypeProtocol/#output_1","title":"Output:","text":"<pre><code>iOS Developer\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_12","title":"iOS Protocols with Associated Type","text":"<p>For <code>Person1</code></p> <pre><code>let person1 = Person1()\nprint(person1.property)\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_13","title":"iOS Protocols with Associated Type","text":""},{"location":"home/AssociatedTypeProtocol/#output_2","title":"Output:","text":"<pre><code>2020\n</code></pre>"},{"location":"home/AssociatedTypeProtocol/#_14","title":"iOS Protocols with Associated Type","text":""},{"location":"home/AssociatedTypeProtocol/#download-the-sample-here","title":"Download the sample here","text":"<p>AssociatedType.playground</p> <p>Contents.swift</p> <p></p>"},{"location":"home/AssociatedTypeProtocol/#reference","title":"Reference:","text":""},{"location":"home/AssociatedTypeProtocol/#license","title":"License","text":"<p>AssociatedType.playground is distributed under the MIT license .</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/BatteryLevel/","title":"iOS Battery Level","text":"<p>First we need enable battery monitoring to get Battery Level &amp; Battery Status</p> <pre><code>UIDevice.current.isBatteryMonitoringEnabled = true\n</code></pre>"},{"location":"home/BatteryLevel/#_1","title":"iOS Battery Level","text":"<p>Battery level ranges from 0.0 (fully discharged) to 1.0 (100% charged)</p> <p>To get the Battery Level</p> <pre><code>var batteryLevel: Float { UIDevice.current.batteryLevel }\n</code></pre>"},{"location":"home/BatteryLevel/#_2","title":"iOS Battery Level","text":"<p>You can add observer to monitor Battery Level continuously.</p> <pre><code>NotificationCenter.default.addObserver(self, selector: #selector(batteryLevelDidChange), name: UIDevice.batteryLevelDidChangeNotification, object: nil)\n</code></pre> <pre><code>//MARK:- Get Battery Level\n@objc func batteryLevelDidChange(_ notification: Notification) {\n    print(\"\\(Int(batteryLevel * 100))%\")\n}\n</code></pre>"},{"location":"home/BatteryLevel/#_3","title":"iOS Battery Level","text":"<p>Ref: Apple Document - Battery Level</p> <p>You can also verify the battery power state of the device</p> <pre><code>var batteryState: UIDevice.BatteryState { UIDevice.current.batteryState }\n</code></pre>"},{"location":"home/BatteryLevel/#_4","title":"iOS Battery Level","text":""},{"location":"home/BatteryLevel/#overview","title":"Overview:","text":"<p><code>Enumeration</code> constants are used by the batteryState property</p> <ul> <li> <p><code>case .unknown</code></p> <p>The battery state for the device cannot be determined </p> </li> <li> <p><code>case .charging</code></p> <p>The device is plugged into power &amp; the battery is less than 100% charged</p> </li> </ul> <p>You can add observer to monitor Battery State continuously.</p> <pre><code>NotificationCenter.default.addObserver(self, selector: #selector(batteryStateDidChange), name: UIDevice.batteryStateDidChangeNotification, object: nil)\n</code></pre> <pre><code>//MARK:- Get Battery State\n@objc func batteryStateDidChange(_ notification: Notification) {\n    switch batteryState {\n        case .unplugged, .unknown:\n            print(\"Not charging\")\n        case .charging:\n            print(\"Charging\")\n        case .full:\n            print(\"Full\")\n        @unknown default:\n            print(\"Nothing\")\n    }\n}\n</code></pre>"},{"location":"home/BatteryLevel/#_5","title":"iOS Battery Level","text":"<ul> <li><code>case .unplugged</code></li> </ul> <p>The battery is discharging</p>"},{"location":"home/BatteryLevel/#_6","title":"iOS Battery Level","text":""},{"location":"home/BatteryLevel/#_7","title":"iOS Battery Level","text":"<ul> <li><code>case . full</code></li> </ul> <p>The device is plugged into power and the battery is 100% charged</p>"},{"location":"home/BatteryLevel/#_8","title":"iOS Battery Level","text":""},{"location":"home/BatteryLevel/#_9","title":"iOS Battery Level","text":"<p>Ref: Apple Document - Battery State</p>"},{"location":"home/BatteryLevel/#sample","title":"Sample:","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/BlinkingLabel/","title":"iOS Blinking/Flashing label","text":"SwiftObjective C <pre><code>extension UILabel {\n    //MARK: StartBlink\n    func startBlink() {\n        UIView.animate(withDuration: 0.8,//Time duration\n                    delay:0.0,\n                    options:[.allowUserInteraction, .curveEaseInOut, .autoreverse, .repeat], \n                    animations: { self.alpha = 0 }, completion: nil)\n    }\n\n    //MARK: StopBlink\n    func stopBlink() {\n        layer.removeAllAnimations()\n        alpha = 1\n    }\n}\n</code></pre> <pre><code>yourLabelName.alpha = 1.0f;// yourLabelName\n[UIView animateWithDuration:0.8 delay:0.0 options: UIViewAnimationOptionCurveEaseInOut |                                                            UIViewAnimationOptionRepeat |\n                                                UIViewAnimationOptionAutoreverse |\n                                                UIViewAnimationOptionAllowUserInteraction\n                                        animations:^{\n                                            yourLabelName.alpha = 0.0f;// yourLabelName\n                                        }\n                                        completion:^(BOOL finished){\n                                            // Do nothing\n                                        }];\n</code></pre> <p>You can change the values to get different effects.</p>"},{"location":"home/BlinkingLabel/#for-example","title":"For example:","text":"<p>Tip</p> <p>Changing <code>animateWithDuration</code> will set the blinking speed, repeat will give you continuous blinking effects.</p> <p>Further you can use it on anything that inherits from <code>UIView</code> example a <code>UIButton</code>, <code>UILabel</code>, custom view, etc.</p> <p></p>"},{"location":"home/CallAsFunction/","title":"iOS CallAsFunction() in Swift 5.2","text":""},{"location":"home/CallAsFunction/#overview","title":"Overview:","text":"<ol> <li>Swift introduces statically callable values.</li> <li>It's a fancy way of saying that you can now call a value directly.</li> <li>You can use <code>callAsFunction</code></li> </ol> <p>For Example: Create a <code>Age</code> struct that has property of <code>birthYear</code>, then add <code>callAsFunction()</code>. So everytime you call a <code>Age</code> you will get your age.</p>"},{"location":"home/CallAsFunction/#above-swift-52","title":"Above Swift 5.2:","text":"<pre><code>struct Age {\n    var birthYear: Int\n\n    func callAsFunction() -&gt; Int {\n        //get the current year\n        let year = Calendar.current.component(.year, from: Date())\n        return (year - birthYear)\n    }\n}\n</code></pre>"},{"location":"home/CallAsFunction/#_1","title":"iOS CallAsFunction() in Swift 5.2","text":"<p>Now you can just call like below line <pre><code>let ageObjc = Age(birthYear: 1991)\nprint(ageObjc())\n</code></pre></p>"},{"location":"home/CallAsFunction/#_2","title":"iOS CallAsFunction() in Swift 5.2","text":"<p>Here you can just call the object of struct like a function and you will get a (age) value from the function. <pre><code>ageObjc()\n</code></pre></p>"},{"location":"home/CallAsFunction/#_3","title":"iOS CallAsFunction() in Swift 5.2","text":""},{"location":"home/CallAsFunction/#here","title":"Here:","text":"<ol> <li>You can add <code>mutating</code> before the function.</li> <li>You can return the value of the function.</li> <li>You can add as many parameters as you want.</li> </ol>"},{"location":"home/CallAsFunction/#example","title":"Example:","text":"<p>Another example: We can create <code>Dice</code> struct that has properties for <code>lowerValue</code> and <code>upperBound</code></p> <pre><code>struct Dice {\n    var min: Int\n    var max: Int\n\n    func callAsFunction() -&gt; Int {\n        (min...max).randomElement()!\n    }\n}\n</code></pre>"},{"location":"home/CallAsFunction/#_4","title":"iOS CallAsFunction() in Swift 5.2","text":"<p>Declare this globally <pre><code>let dice = Dice(min: 1, max: 6)\n</code></pre></p>"},{"location":"home/CallAsFunction/#_5","title":"iOS CallAsFunction() in Swift 5.2","text":"<p>Add below line into button action <pre><code>let rolls = dice()\nprint(rolls)\n</code></pre></p>"},{"location":"home/CallAsFunction/#_6","title":"iOS CallAsFunction() in Swift 5.2","text":""},{"location":"home/CallAsFunction/#reference","title":"Reference:","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/DoubleQuestion/","title":"iOS double question marks in Swift ??","text":"<p><code>??</code> is Nil-Coalescing Operator <code>(a ?? b)</code> unwraps an <code>optional a</code> if it contains a value, or returns a default value <code>b</code> if <code>a</code> is nil. The expression <code>a</code> is always of an optional type.</p>"},{"location":"home/DoubleQuestion/#example","title":"Example:","text":"<pre><code>a != nil ? a! : b\n</code></pre>"},{"location":"home/DoubleQuestion/#_1","title":"iOS double question marks in Swift ??","text":"<p>The shorthand code is</p> <pre><code>a ?? b\n</code></pre>"},{"location":"home/DoubleQuestion/#_2","title":"iOS double question marks in Swift ??","text":"Example 1Example 2 <pre><code>var aValue: Int? //aValue has no value\nlet bValue = 5\nvar resultValue: Int\nresultValue = aValue ?? bValue\nprint(resultValue)\n</code></pre> <pre><code>var aValue: Int? = 10 //aValue has value\nlet bValue = 5\nvar resultValue: Int\nresultValue = aValue ?? bValue\nprint(resultValue)\n</code></pre> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/DoubleQuestion/#_3","title":"iOS double question marks in Swift ??","text":"<pre><code>//resultValue will be 5\n</code></pre>"},{"location":"home/DoubleQuestion/#_4","title":"iOS double question marks in Swift ??","text":""},{"location":"home/DoubleQuestion/#_5","title":"iOS double question marks in Swift ??","text":"<pre><code>//resultValue will be 10\n</code></pre>"},{"location":"home/DoubleQuestion/#_6","title":"iOS double question marks in Swift ??","text":""},{"location":"home/FontFamily/","title":"iOS Get Font Family names within your app","text":"<p>Get all font names to be used within your app, including the custom fonts.</p> Above Swift 3.0Swift 2.0Objective C <pre><code>for familyName:String in UIFont.familyNames {\n    print(\"Family Name: \\(familyName)\")\n    for fontName:String in UIFont.fontNames(forFamilyName: familyName) {\n      print(\"--Font Name: \\(fontName)\")\n    }\n}\n</code></pre> <pre><code>for familyName:AnyObject in UIFont.familyNames() {\n    print(\"Family Name: \\(familyName)\")\n    for fontName:AnyObject in UIFont.fontNamesForFamilyName(familyName as! String) {\n      print(\"--Font Name: \\(fontName)\")\n    }\n}\n</code></pre> <pre><code>for (NSString *familyName in [UIFont familyNames]){\n    NSLog(@\"Family name: %@\", familyName);\n    for (NSString *fontName in [UIFont fontNamesForFamilyName:familyName]) {\n        NSLog(@\"--Font name: %@\", fontName);\n  }\n}\n</code></pre> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/HeaderAnimation/","title":"iOS Header Animation / CoreData / MVVM","text":""},{"location":"home/HeaderAnimation/#overview","title":"Overview:","text":"<ol> <li>TableView</li> <li>Sample MVVM pattern</li> <li>Swift 5.0 above</li> <li>Xcode 11 above</li> <li>Sample CoreData</li> <li>JSON to CoreData, CoreData to Model class, Model class to View</li> </ol>"},{"location":"home/HeaderAnimation/#demo","title":"Demo:","text":""},{"location":"home/HeaderAnimation/#_1","title":"iOS Header Animation / CoreData / MVVM","text":""},{"location":"home/HeaderAnimation/#download-the-sample-here","title":"Download the sample here:","text":"<p>HeaderAnimation</p> <p></p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/ImageURLDownload/","title":"iOS image download from URL &amp; Cache","text":""},{"location":"home/ImageURLDownload/#overview","title":"Overview","text":"<ul> <li>Manual drag &amp; drop the class</li> <li>Swift 5.0 above</li> <li>Xcode 11 above</li> <li>Download image from URL</li> <li>Download image from URL &amp; added to cache</li> <li>Default image option</li> </ul> <pre><code>let url:URL? = URL(string: \"https://raw.githubusercontent.com/Sivabalaa/images/master/iOSTreeLogo.png\")\n</code></pre>"},{"location":"home/ImageURLDownload/#_1","title":"iOS image download from URL &amp; Cache","text":"<p>Use the below code to get image from URL</p> <pre><code>imageView.setImage(from: url, placeholder: UIImage(named: \"sample\"))\n</code></pre>"},{"location":"home/ImageURLDownload/#_2","title":"iOS image download from URL &amp; Cache","text":"<p>or </p> <pre><code>imageView.setImage(from: url)\n</code></pre>"},{"location":"home/ImageURLDownload/#_3","title":"iOS image download from URL &amp; Cache","text":"<p>If you are loading multiple image in <code>UITableview</code> or in <code>UICollectionView</code></p> <p>Use the below code to get image from URL &amp; added to cache <pre><code>imageView.setImage(from: url, isCache: true)\n</code></pre></p>"},{"location":"home/ImageURLDownload/#_4","title":"iOS image download from URL &amp; Cache","text":"<p>or  <pre><code>imageView.setImage(from: url, placeholder: UIImage(named: \"sample\"), isCache: true)\n</code></pre></p>"},{"location":"home/ImageURLDownload/#_5","title":"iOS image download from URL &amp; Cache","text":""},{"location":"home/ImageURLDownload/#download-the-file-here","title":"Download the file here","text":"<p>UIImageView+loadFromUrl.swift</p> <p></p>"},{"location":"home/ImageURLDownload/#license","title":"License","text":"<p>UIImageView+loadFromUrl is distributed under the MIT license .</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/IphoneAppPreventLock/","title":"iOS Prevent screen lock on my app","text":""},{"location":"home/IphoneAppPreventLock/#objective-c","title":"Objective-C:","text":"<pre><code>[[UIApplication sharedApplication] setIdleTimerDisabled: YES];\n</code></pre>"},{"location":"home/IphoneAppPreventLock/#_1","title":"iOS Prevent screen lock on my app","text":""},{"location":"home/IphoneAppPreventLock/#swift-20","title":"Swift 2.0:","text":"<pre><code>UIApplication.sharedApplication().idleTimerDisabled = true\n</code></pre>"},{"location":"home/IphoneAppPreventLock/#_2","title":"iOS Prevent screen lock on my app","text":""},{"location":"home/IphoneAppPreventLock/#swift-3","title":"Swift 3:","text":"<pre><code>UIApplication.shared.isIdleTimerDisabled = true\n</code></pre>"},{"location":"home/IphoneAppPreventLock/#_3","title":"iOS Prevent screen lock on my app","text":"<p>Here you have two options depending on where you want to invoke the code:</p> <p>Inside <code>AppDelegate.swift</code>: <pre><code>application.isIdleTimerDisabled = true\n</code></pre></p>"},{"location":"home/IphoneAppPreventLock/#_4","title":"iOS Prevent screen lock on my app","text":"<p>Outside <code>AppDelegate.swift</code>: <pre><code>UIApplication.shared.isIdleTimerDisabled = true\n</code></pre></p>"},{"location":"home/IphoneAppPreventLock/#_5","title":"iOS Prevent screen lock on my app","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/Macros/","title":"Swift macros #if - #endif","text":"<p>During iOS development we come across multiple environments (Staging &amp; Production).</p> <p>We can use <code>#if</code> to differentiate Development, Staging &amp; Production at one time, we can create different scheme to take the build easily.</p>"},{"location":"home/Macros/#example","title":"Example:","text":"<pre><code>//MARK:- Macros\nvar APIURL: String {\n    #if dev\n        return \"http://192.168.0.1/\"\n    #elseif stg\n        return \"http://demo.example.com/\"\n    #else\n        return \"http://live.example.com/\"\n    #endif\n}\nprint(APIURL)\n</code></pre>"},{"location":"home/Macros/#_1","title":"Swift macros #if - #endif","text":"<p>You can use <code>#if</code> dev anywhere in the project to achieve code execution. Suppose, If you need to show their logs only in development and not in staging then you can write only inside <code>dev</code> and not in staging or live.</p> <p>Example: You will be having logs only in development and the entire <code>print</code> will work under development scheme. <code>Logs</code> will not show/print for staging and live.</p> <p>Follow the below steps to add macros into project.</p> <ol> <li>Goto: Project \u2192 Info \u2192 Configurations</li> <li>Click + to add your macros</li> </ol> <p></p> <ol> <li>Goto: Target \u2192 Build Settings \u2192 <code>Other Swift Flags</code></li> <li>You need to add flags to the macros (<code>Dev</code> \u2192 <code>-Ddev</code>, <code>Staging</code> \u2192 <code>-Dstg</code>)</li> <li>Always should add with prefix <code>-D</code> without space to use inside code</li> </ol> <p></p>"},{"location":"home/Macros/#overview","title":"Overview:","text":"<p>Now you need to create multiple scheme, so that you can change the scheme &amp; run to get different line code execution for a same variable or function or class.</p> <p></p> <ol> <li>Goto \u2192 Edit Scheme...</li> <li>Run \u2192 Info \u2192 Build Configuration</li> <li>Select scheme in Build Configuration to run in particular scheme</li> </ol> <p></p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/MakeACall/","title":"iOS Make a call from String","text":"<p>You can use a simple function below to make a call from your iOS app.</p> <pre><code>//MARK:- String\nextension String {\n    //MARK: makeACall\n    func makeACall() {\n        guard let url = URL(string: \"tel://\\(self)\"), UIApplication.shared.canOpenURL(url) else { return }\n\n        if #available(iOS 10, *) {\n            UIApplication.shared.open(url)\n        } else {\n            UIApplication.shared.openURL(url)\n        }\n    }\n}\n</code></pre>"},{"location":"home/MakeACall/#_1","title":"iOS Make a call from String","text":"<p>You can call from anywhere like <pre><code>\"9876543210\".makeACall()\n\n\"1(617)111-22-33\".makeACall()\n</code></pre></p>"},{"location":"home/MakeACall/#_2","title":"iOS Make a call from String","text":"<p>It will fail to run in some cases like below example</p> <pre><code>\"#$%^:+1(617)111-22-33\".makeACall()\n\n\"Phone: +1(617)111-22-33\".makeACall()\n</code></pre>"},{"location":"home/MakeACall/#_3","title":"iOS Make a call from String","text":"<p>Make sure that, your phone number should be in numeric format.</p>"},{"location":"home/MakeACall/#note","title":"Note:","text":"<p>To get the result, run the app on a real device because it won't work on the simulator \uf8ff</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/Protocol/","title":"Protocol Oriented Programming in Swift","text":"<p>\"A protocol defines a blueprint of methods, properties\u2026 The protocol can then be adopted by a class, structure, or enumeration.\" -\u200aApple</p> <ol> <li>An advantage of protocols in Swift is that objects can conform to multiple protocols.</li> <li>POP encourages flat and non-nested code.</li> <li>Swift supports only multiple inheritance of protocols.</li> <li>Value Type:- (Although value types do not support inheritance in Swift, they can conform to protocols.)</li> </ol>"},{"location":"home/Protocol/#defining-struct","title":"Defining struct:","text":"<p>We can create <code>struct</code> as person</p> <pre><code>struct Person {\n    var firstName: String\n    var lastName: String?\n    var experience: Int\n}\n</code></pre>"},{"location":"home/Protocol/#_1","title":"Protocol Oriented Programming in Swift","text":""},{"location":"home/Protocol/#defining-protocol","title":"Defining protocol:","text":"<pre><code>protocol Details {\n    var fullName: String { get }\n    func sayHi()\n}\n</code></pre>"},{"location":"home/Protocol/#_2","title":"Protocol Oriented Programming in Swift","text":"<ol> <li>I have created <code>protocol</code> as Details, to get info about person</li> <li>Inside the <code>protocol</code> block, when we describe a property, we must specify whether the property is only gettable <code>{ get }</code> or both gettable and settable <code>{ get set }</code></li> </ol> <p>When we fail to mention <code>{ get }</code> or <code>{ get set }</code> to a property, it show error like</p> <p></p>"},{"location":"home/Protocol/#extension-for-struct","title":"Extension for struct:","text":"<pre><code>extension Person: Details {\n    var fullName : String {\n        get {\n            return firstName + \" \" + (lastName ?? \"\")\n        }\n    }\n\n    func sayHi() {\n        print(\"Hi, My self \\(fullName), I have \\(experience) years of experience in iOS Development.\")\n    }\n}\n</code></pre>"},{"location":"home/Protocol/#_3","title":"Protocol Oriented Programming in Swift","text":"<p>Just call like</p> <pre><code>let person = Person(firstName: \"Sivabalaa\", lastName: \"Jothibose\", experience: 6)\nperson.sayHi()\n</code></pre>"},{"location":"home/Protocol/#_4","title":"Protocol Oriented Programming in Swift","text":""},{"location":"home/Protocol/#output","title":"Output:","text":"<pre><code>Hi, My self Sivabalaa Jothibose, I have 6 years of experience in iOS Development.\n</code></pre>"},{"location":"home/Protocol/#_5","title":"Protocol Oriented Programming in Swift","text":""},{"location":"home/Protocol/#protocol-composition","title":"Protocol Composition:","text":"<p>\"Multiple protocols at the same time\"</p> <pre><code>protocol Experience {\n    var experience: Int { get }\n}\n</code></pre>"},{"location":"home/Protocol/#_6","title":"Protocol Oriented Programming in Swift","text":"<pre><code>protocol Domain {\n    var domain: String { get }\n}\n</code></pre>"},{"location":"home/Protocol/#_7","title":"Protocol Oriented Programming in Swift","text":"<pre><code>struct Person: Details, Experience, Domain {\n    var fullName: String\n    var experience: Int\n    var domain: String\n\n    func sayHi() {\n        print(\"Hi, My self \\(fullName), I have \\(experience) years of experience in \\(domain).\")\n    }\n}\n</code></pre>"},{"location":"home/Protocol/#_8","title":"Protocol Oriented Programming in Swift","text":"<p>Just call like</p> <pre><code>let person = Person(fullName: \"Sivabalaa\", experience: 6, domain: \"iOS Development\")\nperson.sayHi()\n</code></pre>"},{"location":"home/Protocol/#_9","title":"Protocol Oriented Programming in Swift","text":""},{"location":"home/Protocol/#output_1","title":"Output:","text":"<pre><code>Hi, My self Sivabalaa Jothibose, I have 6 years of experience in iOS Development.\n</code></pre>"},{"location":"home/Protocol/#_10","title":"Protocol Oriented Programming in Swift","text":""},{"location":"home/Protocol/#optional-protocol","title":"Optional Protocol:","text":"<pre><code>@objc protocol Details1 {\n    var experience: Int { get }\n    @objc optional var domain: String { get }\n}\n</code></pre>"},{"location":"home/Protocol/#_11","title":"Protocol Oriented Programming in Swift","text":"<p>Here domain will be <code>optional</code>, we may include or we may not.</p>"},{"location":"home/Protocol/#protocol-extension","title":"Protocol Extension:","text":"<pre><code>protocol SayHi {\n func sayHi()\n}\n</code></pre>"},{"location":"home/Protocol/#_12","title":"Protocol Oriented Programming in Swift","text":"<p>We can create <code>extension</code> for <code>protocol</code></p> <pre><code>extension SayHi {\n    func sayHi() { \n        print(\"Hi, I am Sivabalaa.\")\n    }\n}\n</code></pre>"},{"location":"home/Protocol/#_13","title":"Protocol Oriented Programming in Swift","text":"<pre><code>struct Details: SayHi {}\n</code></pre>"},{"location":"home/Protocol/#_14","title":"Protocol Oriented Programming in Swift","text":"<p>You can just call like</p> <pre><code>let details = Details()\ndetails.sayHi()\n</code></pre>"},{"location":"home/Protocol/#_15","title":"Protocol Oriented Programming in Swift","text":""},{"location":"home/Protocol/#protocol-as-type-last","title":"Protocol as Type (Last):","text":"<pre><code>protocol SayHi {\n func sayHi()\n}\n</code></pre>"},{"location":"home/Protocol/#_16","title":"Protocol Oriented Programming in Swift","text":"<p>We can create <code>struct</code> as StructDetails</p> <pre><code>struct StructDetails: SayHi {\n    func sayHi() {\n        print(\"Hi, This is from Struct\")\n    }\n}\n</code></pre>"},{"location":"home/Protocol/#_17","title":"Protocol Oriented Programming in Swift","text":"<p>We can create <code>class</code> as ClassDetails</p> <pre><code>class ClassDetails: SayHi {\n    func sayHi() {\n        print(\"Hi, This is from Class\")\n    }\n}\n</code></pre>"},{"location":"home/Protocol/#_18","title":"Protocol Oriented Programming in Swift","text":"<p>Now, let\u2019s make object for <code>struct</code> &amp; <code>class</code></p> <pre><code>let structDetails = StructDetails()\nlet classDetails = ClassDetails()\n</code></pre>"},{"location":"home/Protocol/#_19","title":"Protocol Oriented Programming in Swift","text":"<p>Now, you can add them into an array.</p> <pre><code>let arraySayHi: [SayHi] = [structDetails, classDetails]\nfor sayhi in arraySayHi {\n    print(sayhi.sayHi())\n}\n</code></pre>"},{"location":"home/Protocol/#_20","title":"Protocol Oriented Programming in Swift","text":"<p>Output: <pre><code>Hi, This is from Struct\nHi, This is from Class\n</code></pre></p>"},{"location":"home/Protocol/#_21","title":"Protocol Oriented Programming in Swift","text":"<p><code>protocol</code> is wonderful, try it in your code &amp; enjoy.</p>"},{"location":"home/Protocol/#reference","title":"Reference:","text":"<p>Toptal</p> <p></p> <p></p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/RemoveAllSubviews/","title":"iOS REMOVE ALL SUBVIEWS","text":""},{"location":"home/RemoveAllSubviews/#objective-c","title":"Objective C:","text":"<p>To remove all subViews</p> <pre><code>[self.view.subviews makeObjectsPerformSelector: @selector(removeFromSuperview)];\n</code></pre>"},{"location":"home/RemoveAllSubviews/#_1","title":"iOS REMOVE ALL SUBVIEWS","text":"<pre><code># pragma mark - Removing all subviews\n- (void) clearAction {\n    NSLog(@\"clear all subViews\");\n    [self.view.subviews makeObjectsPerformSelector: @selector(removeFromSuperview)];\n}\n</code></pre>"},{"location":"home/RemoveAllSubviews/#_2","title":"iOS REMOVE ALL SUBVIEWS","text":"<p>or <pre><code># pragma mark - Removing all subviews\n- (void) clearAction{\n    for (UIView *subview in self.view.subviews) {\n        [subview removeFromSuperview];\n    }\n}\n</code></pre></p>"},{"location":"home/RemoveAllSubviews/#_3","title":"iOS REMOVE ALL SUBVIEWS","text":"<p>To remove particular subview</p> <pre><code>[subview removeFromSuperview];\n</code></pre>"},{"location":"home/RemoveAllSubviews/#_4","title":"iOS REMOVE ALL SUBVIEWS","text":""},{"location":"home/RemoveAllSubviews/#swift","title":"Swift:","text":"<p>To remove all subViews</p> <pre><code>//MARK: Removing all subviews\nfunc clearAction() {\n    self.view.subviews.forEach { subview in\n        subview.removeFromSuperview()\n    }\n}\n</code></pre>"},{"location":"home/RemoveAllSubviews/#_5","title":"iOS REMOVE ALL SUBVIEWS","text":"<p>or</p> <pre><code>//MARK: Removing all subviews\nfunc clearAction() {\n    for subView in self.view.subviews {\n        subView.removeFromSuperview()\n    }\n}\n</code></pre>"},{"location":"home/RemoveAllSubviews/#_6","title":"iOS REMOVE ALL SUBVIEWS","text":"<p>To remove particular subview</p> <pre><code>subView.removeFromSuperview()\n</code></pre>"},{"location":"home/RemoveAllSubviews/#_7","title":"iOS REMOVE ALL SUBVIEWS","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/ResizeImage/","title":"iOS image resize/crop","text":""},{"location":"home/ResizeImage/#overview","title":"Overview","text":"<ul> <li>Manual drag &amp; drop the class.</li> <li>Swift 5.0 above.</li> <li>Xcode 11 above.</li> <li>Resize/Crop the image.</li> <li>You can mention <code>Width</code> &amp; <code>Height</code> of the image.</li> </ul> <pre><code>image.resize(to: CGSize(width: 200, height: 200))\n</code></pre>"},{"location":"home/ResizeImage/#_1","title":"iOS image resize/crop","text":"<p>In many cases you need to upload the image to backend with same quality with low dimension you can use the above class and mention the sizes.</p>"},{"location":"home/ResizeImage/#download-the-file-here","title":"Download the file here","text":"<p>UIImage+Resize.swift</p> <p></p>"},{"location":"home/ResizeImage/#license","title":"License","text":"<p>UIImage+Resize is distributed under the MIT license .</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/Resolution/","title":"iOS Get Screen sizes for iPhone/iPad","text":""},{"location":"home/Resolution/#about","title":"About","text":""},{"location":"home/Resolution/#a-custom-class-to-identify-screensize-of-various-devices","title":"A custom class to identify screensize of various devices.","text":""},{"location":"home/Resolution/#overview","title":"Overview","text":"<ul> <li>Easy customization</li> <li>Swift 5.0 above</li> <li>Xcode 11 above</li> <li>Orientation support</li> <li>Manual drag &amp; drop the class</li> <li>iPhone/iPad support</li> </ul>"},{"location":"home/Resolution/#screensizes","title":"ScreenSizes","text":""},{"location":"home/Resolution/#workflow","title":"Workflow","text":"<ul> <li>Import <code>UIScreen+ScreenSize.swift</code> into you project</li> <li>If you need to design specifically for iPhoneX series use the below code.</li> </ul> <pre><code>if UIScreen.screenSizeType().isIPhoneX {\n    print(\"iPhoneX models...\")\n}\n</code></pre>"},{"location":"home/Resolution/#_1","title":"iOS Get Screen sizes for iPhone/iPad","text":"<ul> <li>For other uses like if you need to redesign for iPhoneSE &amp; similar smaller devices, you can go with <code>switch</code> cases.</li> </ul> <pre><code>switch UIScreen.screenSizeType() {\n    case .inch4(.portrait),.inch4(.landscape):\n        print(\"iPhoneSE\")\n    case .inch4_7:\n        print(\"iPhone8\")\n    default:\n        break\n}\n</code></pre>"},{"location":"home/Resolution/#_2","title":"iOS Get Screen sizes for iPhone/iPad","text":"<pre><code>print(UIScreen.screenSizeType())\n</code></pre>"},{"location":"home/Resolution/#_3","title":"iOS Get Screen sizes for iPhone/iPad","text":""},{"location":"home/Resolution/#output","title":"Output","text":"<pre><code>iPhoneX models...\ninch6_1(Macros.ScreenOrientation.portrait)\n</code></pre>"},{"location":"home/Resolution/#_4","title":"iOS Get Screen sizes for iPhone/iPad","text":""},{"location":"home/Resolution/#reference-iphoneresolutions","title":"Reference: iPhoneResolutions","text":""},{"location":"home/Resolution/#_5","title":"iOS Get Screen sizes for iPhone/iPad","text":""},{"location":"home/Resolution/#download-the-file-here","title":"Download the file here","text":"<p>UIScreen+ScreenSize.swift</p> <p></p>"},{"location":"home/Resolution/#license","title":"License","text":"<p>UIScreen+ScreenSize is distributed under the MIT license .</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/ShadowView/","title":"iOS Shadow view","text":"<p>iOS can dynamically generate shadows for any <code>UIView</code></p> <p></p>"},{"location":"home/ShadowView/#overview","title":"Overview:","text":"<ol> <li><code>shadowColor</code> is the color of the shadow &amp; need to be a <code>CGColor</code>.</li> <li><code>shadowRadius</code> is the width of the shadow along the shadow path.</li> <li><code>shadowOpacity</code> determines the opacity of the shadow.</li> <li><code>shadowOffset</code> is a <code>CGSize</code> representing how far to offset the shadow from the path.</li> </ol> <pre><code>//MARK:- ShadowView\nextension UIView {\n    //Shadow view\n    func dropShadow(color: UIColor, opacity: Float = 0.5, offSet: CGSize, radius: CGFloat = 1, scale: Bool = true) {\n        self.layer.masksToBounds = false\n        self.layer.shadowColor = color.cgColor\n        self.layer.shadowOpacity = opacity\n        self.layer.shadowOffset = offSet\n        self.layer.shadowRadius = radius\n        self.layer.shadowPath = UIBezierPath(rect: self.bounds).cgPath\n        self.layer.shouldRasterize = true\n        self.layer.rasterizationScale = scale ? UIScreen.main.scale : 1\n    }\n}\n</code></pre>"},{"location":"home/ShadowView/#_1","title":"iOS Shadow view","text":"<p>You can use inside <code>viewDidLayoutSubviews</code>, its due to update constraints properly for shadow view.</p>"},{"location":"home/ShadowView/#example","title":"Example:","text":"<pre><code>//MARK:- viewDidLayoutSubviews\noverride func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n    self.yourView.dropShadow(color: .black, opacity: 1, offSet: CGSize(width: -1, height: 1), radius: 3, scale: true)\n}\n</code></pre>"},{"location":"home/ShadowView/#_2","title":"iOS Shadow view","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/ShimmerEffect/","title":"Shimmer Effect","text":""},{"location":"home/ShimmerEffect/#overview","title":"Overview","text":"<ul> <li>Easy customization</li> <li>Swift 5.0 above</li> <li>Xcode 11 above</li> <li>Customizable colors, animation speed</li> <li>Manual drag &amp; drop the class</li> <li>iPhone/iPad support</li> </ul>"},{"location":"home/ShimmerEffect/#demo","title":"Demo:","text":""},{"location":"home/ShimmerEffect/#workflow","title":"Workflow","text":"<ul> <li>Import <code>UIView+ShimmerEffect.swift</code> into you project</li> <li>Use the below line of code to add shimmer easily to any  <code>UIImageView</code>,<code>UILabel</code>,<code>UIButton</code>, <code>UIView</code>.</li> </ul> <pre><code>testLbl.shimmerEffectView()\n</code></pre>"},{"location":"home/ShimmerEffect/#_1","title":"Shimmer Effect","text":"<pre><code>imageView.shimmerEffectView()\n</code></pre>"},{"location":"home/ShimmerEffect/#_2","title":"Shimmer Effect","text":"<ul> <li>If you need to change the color of shimmer, you can easily customize the colors usings <code>gradientBackground</code> &amp; <code>gradientBackgroundMove</code>.</li> <li>Shimmers can be used for loading purposes such as while we receive data from the API or something releated to data loading.</li> <li>After all is done, we can remove the shimmer by using the below code.</li> </ul> <pre><code>testLbl.shimmerStopAnimate()\nimageView.shimmerStopAnimate()\n</code></pre>"},{"location":"home/ShimmerEffect/#_3","title":"Shimmer Effect","text":""},{"location":"home/ShimmerEffect/#download-the-file-here","title":"Download the file here","text":"<p>UIView+ShimmerEffect.swift</p> <p></p>"},{"location":"home/ShimmerEffect/#license","title":"License","text":"<p>UIView+ShimmerEffect is distributed under the MIT license .</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/Singleton/","title":"Singleton Class in Swift","text":""},{"location":"home/Singleton/#overview","title":"Overview:","text":"<ol> <li> <p>Singleton is a design pattern that is very popular in development.</p> </li> <li> <p>Singletons are easy to understand.</p> </li> <li> <p>The singleton pattern guarantees that only one instance of a class is instantiated.</p> </li> </ol> <p>In Apple\u2019s frameworks we have come across below singleton classes:</p> <pre><code>// Shared URL Session\nlet sharedURLSession = URLSession.shared\n</code></pre> <p><pre><code>// Default File Manager\nlet defaultFileManager = FileManager.default\n</code></pre> <pre><code>// Standard User Defaults\nlet standardUserDefaults = UserDefaults.standard\n</code></pre></p>"},{"location":"home/Singleton/#_1","title":"Singleton Class in Swift","text":"<p>There are times that you want to make sure only one instance of a class is instantiated and that your application only uses that instance. That\u2019s the primary and only goal of the singleton pattern.</p>"},{"location":"home/Singleton/#example","title":"Example:","text":"<pre><code>//MARK:- Location Manager\nclass LocationManager{\n    static let shared = LocationManager()\n    init(){}\n\n    //MARK:- Location Permission\n    func requestForLocation(){\n        print(\"Location Permission granted\")\n    }\n}\n</code></pre> <pre><code>//Access the class with Singleton Pattern\nLocationManager.shared.requestForLocation() //\"Location Permission granted\"\n</code></pre> <pre><code>//Still you can access the class by creating instance\nlet location = LocationManager() //initialization class\nlocation.requestForLocation() //Call function here\n</code></pre>"},{"location":"home/Singleton/#_2","title":"Singleton Class in Swift","text":"<p>So we have to change the access level of initializer</p> <pre><code>private init(){}\n</code></pre>"},{"location":"home/Singleton/#_3","title":"Singleton Class in Swift","text":"<p>Above class is having by default <code>internal</code> initializer, its change to <code>private</code>. Now you can\u2019t initialize your singleton class again.</p> <p></p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/SmileyRating/","title":"iOS Smiley Rating","text":""},{"location":"home/SmileyRating/#_1","title":"iOS Smiley Rating","text":""},{"location":"home/SmileyRating/#demo","title":"Demo:","text":""},{"location":"home/SmileyRating/#overview","title":"Overview:","text":"<ol> <li>Easy customization(Font, Colors, Images, Ticks, Height, Width, Rounded)</li> <li>@IBInspectable</li> <li>Tappable</li> <li>Draggable</li> <li>Swift 5.0 above</li> <li>Xcode 11 above</li> <li>Orientation support</li> <li>Manual drag &amp; drop the class</li> </ol>"},{"location":"home/SmileyRating/#git","title":"GIT:","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/StringToFloat/","title":"iOS Convert String to Float Swift","text":"<p>You can use <code>Optional Float</code>, stick a <code>!</code> at the end if you know it to be a <code>Float</code>, or use swift <code>if/let</code></p> <pre><code>let floatConversion = Float(\"5.6\")\n</code></pre>"},{"location":"home/StringToFloat/#_1","title":"iOS Convert String to Float Swift","text":"<p>The best way to handle this is direct casting:</p> <pre><code>extension String {\n    var floatValue: Float {\n        return (self as NSString).floatValue\n    }\n}\n</code></pre>"},{"location":"home/StringToFloat/#_2","title":"iOS Convert String to Float Swift","text":""},{"location":"home/StringToFloat/#now-you-can-just-call","title":"Now you can just call","text":"<pre><code>var floatConversion = \"5.6\".floatValue\n</code></pre>"},{"location":"home/StringToFloat/#_3","title":"iOS Convert String to Float Swift","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/TapGesture/","title":"iOS Tap Gesture UITapGestureRecognizer","text":"<p>UITapGestureRecognizer</p>"},{"location":"home/TapGesture/#overview","title":"Overview:","text":"<ol> <li>Common class for Tap Gesture</li> <li>You can copy paste the view Extension class</li> <li>Swift 5.0 above</li> <li>Xcode 11 above</li> </ol> <pre><code>extension UIView {\n    //MARK: addTapGesture\n    func addTapGesture(action : @escaping ()-&gt;Void ){\n        let tap = MyTapGestureRecognizer(target: self , action: #selector(self.handleTap(_:)))\n        tap.action = action\n        tap.numberOfTapsRequired = 1\n        self.addGestureRecognizer(tap)\n        self.isUserInteractionEnabled = true\n    }\n\n    @objc func handleTap(_ sender: MyTapGestureRecognizer) {\n        sender.action!()\n        }\n}\n</code></pre> <pre><code>//MARK: MyTapGestureRecognizer Class\nclass MyTapGestureRecognizer: UITapGestureRecognizer {\n    var action : (()-&gt;Void)? = nil\n}\n</code></pre>"},{"location":"home/TapGesture/#_1","title":"iOS Tap Gesture UITapGestureRecognizer","text":""},{"location":"home/TapGesture/#now-you-can-just-call","title":"Now you can just call","text":"<pre><code>anyView.addTapGesture {\n    //tapGestureAction\n    print(\"Gesture is working\")\n}\n</code></pre>"},{"location":"home/TapGesture/#_2","title":"iOS Tap Gesture UITapGestureRecognizer","text":"<p>In above code anyView can be anyLabel, anyButton etc.,</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/ThreeDoubleQuotes/","title":"Three double quotes '\"\"\"' in Swift","text":"<p>Indentation at the start of each quoted line is removed, as long as it matches the indentation of the closing quote.</p>"},{"location":"home/ThreeDoubleQuotes/#example","title":"Example:","text":"<pre><code>let quotation = \"\"\"Even though there's whitespace to the left,\nthe actual lines aren't indented.\nExcept for this line.\n\nDouble quotes (\") can appear without being escaped.\nI still have \\(apples + oranges) pieces of fruit.\"\"\"\n</code></pre>"},{"location":"home/ThreeDoubleQuotes/#_1","title":"Three double quotes '\"\"\"' in Swift","text":"<p>You can only use them with Xcode 9 above, Swift 4 above.</p>"},{"location":"home/ThreeDoubleQuotes/#reference","title":"Reference:","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/UIActivityViewController/","title":"iOS UIActivityViewController","text":""},{"location":"home/UIActivityViewController/#_1","title":"iOS UIActivityViewController","text":"<ol> <li>A view controller that you can use to offer various services from your app.</li> <li>The system provides several standard services, such as copying items to the pasteboard, sharing content to social media sites, sending items via email or SMS, and more. Apps can also define custom services.</li> <li>You can also specify the list of custom services your app supports.</li> </ol>"},{"location":"home/UIActivityViewController/#example","title":"Example:","text":"SwiftObjective C <pre><code>//MARK:- Activity Sharing View Controller\nfunc activitySharingViewController() {\n    let shareText = \"some text to share\"\n    let activityView : UIActivityViewController = UIActivityViewController.init(activityItems: [shareText], applicationActivities: nil)\n    activityView.popoverPresentationController?.sourceView = self.view\n    activityView.excludedActivityTypes = [.airDrop, .assignToContact, .saveToCameraRoll, .addToReadingList, .postToTwitter, .postToFacebook]\n    activityView.completionWithItemsHandler = { activity, success, items, error in\n        print(\"activity take place \\(activity)\")\n            if success {\n                if activity == UIActivityType.copyToPasteboard {\n                    print(\"copy To Pasteboard \\(shareText)\")\n                }\n            }\n    }\n    self.present(activityView, animated: true, completion: nil)\n}\n</code></pre> <pre><code>#pragma mark - Activity Sharing View Controller\n- (void)activitySharingViewController {\n    NSString *forShare = [NSString stringWithFormat:@\"some text to share\"];\n    UIActivityViewController *shareAction = [[UIActivityViewController alloc] initWithActivityItems:@[forShare] applicationActivities:nil];\n    shareAction.excludedActivityTypes = @[UIActivityTypeAirDrop, UIActivityTypeAssignToContact, UIActivityTypeSaveToCameraRoll, UIActivityTypePostToTwitter, UIActivityTypePostToFacebook, UIActivityTypeAddToReadingList];\n    shareAction.completionWithItemsHandler = ^(NSString *activityType, BOOL completed, NSArray *returnedItems, NSError *activityError){\n        if (completed){\n            if (activityType == UIActivityTypeCopyToPasteboard) {\n                NSLog(@\"Copy to Pasteboard %@\",activityType);\n            }\n        }\n    };\n    [self presentViewController:shareAction animated:true completion:nil];\n}\n</code></pre> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/debugMode/","title":"iOS Debug mode Logs","text":""},{"location":"home/debugMode/#objective-c","title":"Objective C:","text":"<p>Place this code in your <code>.pch</code> file: <pre><code>#ifndef NSLog\n#ifdef DEBUG\n#define NSLog(_format_, ...) NSLog(_format_, ## __VA_ARGS__)\n#else\n#define NSLog(_format_, ...)\n#endif\n#endif\n</code></pre></p>"},{"location":"home/debugMode/#_1","title":"iOS Debug mode Logs","text":"<p>Now you can use <code>NSLog</code> for all log messages that should only be printed in your debug builds.</p>"},{"location":"home/debugMode/#swift-22","title":"Swift 2.2:","text":"<pre><code>func print(items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n  #if DEBUG\n    Swift.print(items[0], separator:separator, terminator: terminator)\n  #endif\n}\n</code></pre>"},{"location":"home/debugMode/#_2","title":"iOS Debug mode Logs","text":""},{"location":"home/debugMode/#swift-30","title":"Swift 3.0:","text":"<pre><code>func print(_ item: @autoclosure () -&gt; Any, separator: String = \" \", terminator: String = \"\\n\"){\n  #if DEBUG\n    Swift.print(item(), separator:separator, terminator: terminator)\n  #endif\n}\n</code></pre>"},{"location":"home/debugMode/#_3","title":"iOS Debug mode Logs","text":"<p>This executes just in the case where you are printing just one thing, which is usually call in <code>DEBUG</code> mode. That's because <code>item()</code> is not called in <code>Release</code> mode.</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/detectScreenshot/","title":"iOS Detect Screenshot","text":"<pre><code>userDidTakeScreenshotNotification\n</code></pre>"},{"location":"home/detectScreenshot/#_1","title":"iOS Detect Screenshot","text":"<p>It will be triggered when user take screenshot's.</p> <pre><code>func detectScreenShot(action: @escaping () -&gt; ()) {\n    //Creating in main Queue\n    let mainQueue = OperationQueue.main\n    NotificationCenter.default.addObserver(forName: UIApplication.userDidTakeScreenshotNotification, object: nil, queue: mainQueue) { notification in\n        // Executes after ScreenShot\n        action()\n    }\n}\n</code></pre>"},{"location":"home/detectScreenshot/#_2","title":"iOS Detect Screenshot","text":"<p>Just call like</p> <pre><code>detectScreenShot {\n    print(\"ScreenShot taken\")\n}\n</code></pre>"},{"location":"home/detectScreenshot/#_3","title":"iOS Detect Screenshot","text":"<p>When ever we add <code>observer</code> we have to <code>remove</code>. Don't forget to remove.</p> <pre><code>NotificationCenter.default.removeObserver(UIApplication.userDidTakeScreenshotNotification)\n</code></pre>"},{"location":"home/detectScreenshot/#_4","title":"iOS Detect Screenshot","text":"<p>We can't restrict user to take screenshot. If you found best way let me know.</p>"},{"location":"home/detectScreenshot/#note-try-in-iphone-device-for-best-result","title":"Note:  Try in iPhone device for best result.","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/isKindOfClass/","title":"iOS isKindOfClass","text":"<p>In Cocoa, almost all classes inherit from <code>NSObject</code>.</p> <p>That means that <code>NSObject</code> is \u2018the superclass\u2019, and (almost) the rest of the classes are subclasses of <code>NSObject</code>.</p>"},{"location":"home/isKindOfClass/#_1","title":"iOS isKindOfClass","text":""},{"location":"home/isKindOfClass/#iskindofclass","title":"isKindOfClass:","text":"<p>Returns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class.</p> SwiftObjective C <p><pre><code>if (element is UIImageView) {\n\n}\n</code></pre> or</p> <pre><code>let viewControllers: [UIViewController] = (self.navigationController?.viewControllers)! as [UIViewController];\n    for aViewController:UIViewController in viewControllers {\n        if aViewController.isKind(of: TestViewController.self) {\n            print(aViewController)\n            return //return for stop the loop\n        }\n    }\n</code></pre> <pre><code>if ([element isKindOfClass: [UIImageView class]]) {\n\n}\n</code></pre> <p>or</p> <pre><code>NSArray *viewControllers = [self.navigationController viewControllers];\n    for (id aViewController in viewControllers) {\n        if([aViewController isKindOfClass:[TestViewController class]]){\n            print(aViewController)\n            return;//return for stop the loop\n        }\n    }\n</code></pre>"},{"location":"home/isKindOfClass/#_2","title":"iOS isKindOfClass","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/networkActivityIndicator/","title":"iOS Network Activity Indicator","text":"<p>To show and hide Network Activity Indicator</p> <p></p> Swift 3.0Swift 2.0Objective c <pre><code>func showHideNetworkIndicator() {\n\u00a0 \u00a0 \u00a0 if UIApplication.shared.isNetworkActivityIndicatorVisible {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIApplication.shared.isNetworkActivityIndicatorVisible = false\n\u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIApplication.shared.isNetworkActivityIndicatorVisible = true\n\u00a0 \u00a0 \u00a0 }\n}\n</code></pre> <pre><code>func showHideNetworkIndicator(){\n\u00a0 \u00a0 \u00a0 if UIApplication.sharedApplication().networkActivityIndicatorVisible{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIApplication.sharedApplication().networkActivityIndicatorVisible = false\n\u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIApplication.sharedApplication().networkActivityIndicatorVisible = true\n\u00a0 \u00a0 \u00a0 }\n}\n</code></pre> <pre><code>- (void)showHideNetworkIndicator {\n\u00a0 \u00a0 \u00a0 if ([[UIApplication sharedApplication]isNetworkActivityIndicatorVisible]) { //If Network indicator is visible\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:false];\n\u00a0 \u00a0 \u00a0 } else { //If Network indicator is invisible\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:true];\n\u00a0 \u00a0 \u00a0 }\n}\n</code></pre>"},{"location":"home/networkActivityIndicator/#_1","title":"iOS Network Activity Indicator","text":""},{"location":"home/networkActivityIndicator/#swift-50-deprecated","title":"Swift 5.0: - Deprecated","text":""},{"location":"home/networkActivityIndicator/#reference","title":"Reference:","text":"<p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/privateSET/","title":"iOS private(set) - Getters and Setters","text":"<p>You assign a lower access level by writing <code>private(set)</code>.</p> <p>Its work like \"Public getter and Private setter\"</p> <pre><code>//MARK:- Foo\nclass Foo {\n    private var name: String\n    private var ID: String\n\n    //initialize\n    init(name:String, ID:String){\n        self.name = name\n        self.ID = ID\n    }\n}\n</code></pre>"},{"location":"home/privateSET/#_1","title":"iOS private(set) - Getters and Setters","text":"<p>We will end with error, when to try to access <code>private</code> variable.</p>"},{"location":"home/privateSET/#_2","title":"iOS private(set) - Getters and Setters","text":"<p>But we can access with new and awesome way to do this in a single line.</p> <p>Then change <code>private</code> access level to <code>private(set)</code></p> <pre><code>//MARK:- Foo\nclass Foo {\n    private(set) var name: String\n    private var ID: String\n\n    //initialize\n    init(name:String, ID:String){\n        self.name = name\n        self.ID = ID    \n    }\n}\n</code></pre>"},{"location":"home/privateSET/#_3","title":"iOS private(set) - Getters and Setters","text":"<p>So you can easy access the <code>private</code> variable, constant, property, or subscript.</p> <pre><code>//Access class value from Foo\nlet fooObjc = Foo.init(name: \"test\", ID: \"9900\")\nprint(fooObjc.name)\n</code></pre>"},{"location":"home/privateSET/#_4","title":"iOS private(set) - Getters and Setters","text":"<p>Try to use with <pre><code>fileprivate(set)\nprivate(set)\ninternal(set) \n</code></pre></p>"},{"location":"home/privateSET/#_5","title":"iOS private(set) - Getters and Setters","text":"<p>to change the access level of this synthesized setter in exactly the same way as for an explicit setter in a computed property.</p> <p>Tip</p> <p>\"This property can be read, but cannot be set from the outside\"</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"home/propertyFunction/","title":"iOS Property as Function","text":"<p>You can write a <code>property</code> as <code>func</code> in swift.</p>"},{"location":"home/propertyFunction/#example","title":"Example:","text":"<pre><code>class ViewController: UIViewController {\n  //MARK: Declaration\n  var aFunctionProperty: (() -&gt; Void)?\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    //Completion Block\n    aFunctionProperty = { \n      print(\"Success\")\n    }\n  }\n}\n</code></pre>"},{"location":"home/propertyFunction/#_1","title":"iOS Property as Function","text":"<p>To call the property I have written inside button action, you can try inside any API call's or button action or tap-gesture any where you need.</p> <pre><code>extension ViewController {\n  @IBAction func buttonAction(_ sender: UIButton) { \n  //Call the function using optional chaining.\n  //if `aFunctionProperty` is nil or has value, it will work.\n  aFunctionProperty?()\n  } \n}\n</code></pre>"},{"location":"home/propertyFunction/#_2","title":"iOS Property as Function","text":"<p>\"Closures are self-contained blocks of functionality that can be passed around and used in your code.\"                 -Apple</p>"},{"location":"home/propertyFunction/#some-examples","title":"Some Examples:","text":"<ol> <li>You can add some parameters to pass inside completion block's.</li> <li>I have tried using Result of <code>Swift 5</code>.</li> </ol> <pre><code>class ViewController: UIViewController {\n  //MARK: Declaration\n  var aFunctionProperty: ((Result) -&gt; Void)? \n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    //Completion Block\n    aFunctionProperty = { (result) in\n      switch result {\n      case .success(true):          \n        print(\"Success\")        \n      default:               \n        print(\"Fail\")\n      }\n    }\n  }\n}\n</code></pre> <pre><code>extension ViewController {\n  @IBAction func buttonAction(_ sender: UIButton) {     \n    //Call the function using optional chaining.\n    //if `aFunctionProperty` is nil or has value, it will work.\n    aFunctionProperty?(.success(true))\n    aFunctionProperty?(.success(false))\n  }\n}\n</code></pre>"},{"location":"home/propertyFunction/#_3","title":"iOS Property as Function","text":"<p>You can also assign a <code>function</code> to a <code>property</code>.</p>"},{"location":"home/propertyFunction/#example_1","title":"Example:","text":"<pre><code>class ViewController: UIViewController {\n  //MARK: Declaration\n  var aFunctionProperty: (() -&gt; Void)?\n}\n</code></pre>"},{"location":"home/propertyFunction/#_4","title":"iOS Property as Function","text":"<p>In some other class you can do assign &amp; call like:</p> <pre><code>class Foo {\n  //Creating Object for Viewcontroller\n  let viewObj = ViewController()\n  //Creating `success` func\n  func success() {\n    print(\"Success\")\n  }\n  //Creating `boo` func\n  func boo () {\n    //Assigning a `func` to a `aFunctionProperty`\n    viewObj.aFunctionProperty = success\n   //Call the Property where you need to call.\n   viewObj.aFunctionProperty?()\n  }\n}\n</code></pre>"},{"location":"home/propertyFunction/#_5","title":"iOS Property as Function","text":"<p>Now you can call a single function.</p> <pre><code>let foo = Foo()\nfoo.boo()\n</code></pre>"},{"location":"home/propertyFunction/#_6","title":"iOS Property as Function","text":"<p>Try it in you code, it will work like awesome.</p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"interview/appthinning/","title":"What is Appthinning?","text":""},{"location":"interview/appthinning/#appthinning","title":"Appthinning:","text":"<ul> <li>Optimizing app delivery. </li> <li>Reducing app download sizes.</li> <li>Improving the overall user experience.</li> <li>App thinning was introduced by Apple with the release of iOS 9 in September 2015.</li> </ul>"},{"location":"interview/appthinning/#some-appthinning-techniques-are","title":"Some AppThinning techniques are:","text":"<ol> <li>App Slicing - The App Store delivers only the app assets that are necessary for the user's device.</li> <li>On-Demand Resources (ODR) - Tag certain app resources as optional, such as additional levels in a game or language-specific content.</li> <li>Bitcode </li> <li>Asset Catalog Optimization - Asset catalogs are used to manage app assets like images, sounds, and videos.</li> <li>Resource Compression</li> </ol> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"interview/breakMultipleLoop/","title":"Break out of multiple loops","text":""},{"location":"interview/breakMultipleLoop/#code","title":"Code","text":"<pre><code>func breakMultipleLoops(_ numbers: ClosedRange&lt;Int&gt;, _ value: Int) {\n    outerLoop: for number1 in numbers {\n        for number2 in numbers {\n            if number1 == number2 &amp;&amp; number1 * number2 == value {\n                print(\"Square found: \\(number1)\")\n                break outerLoop\n            }\n\n        }\n        print(\"number: \\(number1)\")\n    }\n}\n</code></pre>"},{"location":"interview/breakMultipleLoop/#example","title":"Example","text":"<pre><code>let numbers = 1...100\nlet val = 144\nbreakMultipleLoops(numbers, val)\n</code></pre>"},{"location":"interview/breakMultipleLoop/#output","title":"Output","text":"<pre><code>number: 1\nnumber: 2\nnumber: 3\nnumber: 4\nnumber: 5\nnumber: 6\nnumber: 7\nnumber: 8\nnumber: 9\nnumber: 10\nnumber: 11\nSquare found: 12\n</code></pre> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"interview/closure/","title":"What is Closure?","text":"<p>A closure is a self-contained block of functionality that can be passed around and used in your code</p> <p>Tip</p> <p>Closures are widely used in Swift programming for things like callbacks, completion handlers, and functional programming techniques.</p> Escaping ClosuresNon Escaping Closures <ol> <li>Closures that can be called after the function they were passed to has returned. </li> <li>Declared with <code>@escaping</code>.     <pre><code>    var completionClosure: (() -&gt; Void)?\n\n    func doSomethingEscaping(closure: @escaping () -&gt; Void) {\n        // This closure is escaping, so we can store it for later execution.\n        completionClosure = closure\n    }\n\n    func exampleUsage() {\n        doSomethingEscaping {\n            print(\"This is an escaping closure.\")\n        }\n\n        // At a later point in the code, we can execute the escaping closure.\n        completionClosure?()\n    }\n</code></pre> Example     <pre><code>    exampleUsage()\n</code></pre> Output <pre><code>    This is an escaping closure.\n</code></pre></li> </ol> <ol> <li>Closures that do not outlive the function they are passed to. </li> <li>They are executed within the function's scope. <pre><code>    //Example of a non-escaping closure:\n    func doSomethingNonEscaping(closure: () -&gt; Void) {\n        // This closure is non-escaping, so it must be called within this function.\n        closure()\n    }\n\n    func exampleUsage() {\n        doSomethingNonEscaping {\n            print(\"This is a non-escaping closure.\")\n        }\n    }\n</code></pre> Example     <pre><code>    exampleUsage();\n</code></pre> Output     <pre><code>    This is a non-escaping closure.\n</code></pre></li> </ol>"},{"location":"interview/closure/#autoclosures","title":"Autoclosures","text":"<ol> <li>It automatically created to wrap an expression that\u2019s being passed as an argument to a function.</li> <li>It doesn\u2019t take any arguments.</li> </ol> Example1Example2 <p><pre><code>    func printIfTrue(_ predicate: @autoclosure () -&gt; Bool) {\n        if predicate() {\n            print(\"It's true!\")\n        } else {\n            print(\"It's false!\")\n        }\n    }\n</code></pre> Example     <pre><code>    printIfTrue(2 &gt; 1)\n    printIfTrue(2 &lt; 1)\n</code></pre> Output     <pre><code>    It's true!\n    It's false!\n</code></pre></p> <p><pre><code>   enum LogLevel: Int {\n        case debug = 1\n        case info\n        case warning\n        case error\n    }\n\n    var currentLogLevel: LogLevel = .debug\n\n    func log(_ level: LogLevel, message: @autoclosure () -&gt; String) {\n        if level.rawValue &gt;= currentLogLevel.rawValue {\n            print(message())\n        }\n    }\n</code></pre> Example     <pre><code>    // Logging with different levels\n    log(.debug, message: \"This is a debug message\")\n    log(.info, message: \"This is an info message\")\n    log(.warning, message: \"This is a warning message\")\n    log(.error, message: \"This is an error message\")\n</code></pre> <pre><code>    // Only the message for the current log level or higher will be printed\n    currentLogLevel = .warning\n    log(.debug, message: detailedDebugMessage)\n    log(.info, message: \"This info message won't be printed\")\n    log(.warning, message: \"This is a warning message\")\n    log(.error, message: \"This is an error message\")\n</code></pre> Output     <pre><code>    This is a debug message\n    This is an info message\n    This is a warning message\n    This is an error message\n    This is a warning message\n    This is an error message\n</code></pre></p> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"interview/initializer/","title":"What is Initializers and what are its different types?","text":""},{"location":"interview/initializer/#1-designated-initializers","title":"1. Designated Initializers:","text":"<ul> <li>Designated initializers are the primary initializers for a class, structure, or enumeration.</li> <li>A class, structure, or enumeration must have at least one designated initializer.</li> </ul> <p>Enum:</p> <ol> <li>Enums in Swift don't support stored properties like classes and structs, so they don't require initializers in the same way.</li> <li>However, you can define associated values for enum cases, and those associated values can be initialized.</li> </ol> StructClassEnum <pre><code>struct Point {\n    var x: Double\n    var y: Double\n\n    // Designated initializer\n    init(x: Double, y: Double) {\n        self.x = x\n        self.y = y\n    }\n\n    // Method to display information\n    func displayInfo() {\n        print(\"Point coordinates: (\\(x), \\(y))\")\n    }\n}\n\n// Creating an instance using the designated initializer\nlet point1 = Point(x: 3.0, y: 5.0)\n\n// Accessing properties and methods of the instance\npoint1.displayInfo() // Output: Point coordinates: (3.0, 5.0)\n</code></pre> <pre><code>class Point {\n    var x: Double\n    var y: Double\n\n    // Designated initializer\n    init(x: Double, y: Double) {\n        self.x = x\n        self.y = y\n    }\n\n    // Method to display information\n    func displayInfo() {\n        print(\"Point coordinates: (\\(x), \\(y))\")\n    }\n}\n\n// Creating an instance using the designated initializer\nlet point1 = Point(x: 3.0, y: 5.0)\n\n// Accessing properties and methods of the instance\npoint1.displayInfo() // Output: Point coordinates: (3.0, 5.0)     \n</code></pre> <pre><code>enum DayOfWeek: String {\n    case monday, tuesday, wednesday, thursday, friday, saturday, sunday\n\n    // Designated initializer\n    init?(dayString: String) {\n        switch dayString.lowercased() {\n        case \"monday\":\n            self = .monday\n        case \"tuesday\":\n            self = .tuesday\n        case \"wednesday\":\n            self = .wednesday\n        case \"thursday\":\n            self = .thursday\n        case \"friday\":\n            self = .friday\n        case \"saturday\":\n            self = .saturday\n        case \"sunday\":\n            self = .sunday\n        default:\n            return nil\n        }\n    }\n}\n\n// Creating instances using the designated initializer\nif let monday = DayOfWeek(dayString: \"Monday\"),\nlet saturday = DayOfWeek(dayString: \"saturday\"),\nlet invalidDay = DayOfWeek(dayString: \"invalid\") {\n    print(monday.rawValue)    // Output: monday\n    print(saturday.rawValue)  // Output: saturday\n    print(invalidDay)         // Output: nil\n}\n</code></pre>"},{"location":"interview/initializer/#2-convenience-initializers","title":"2. Convenience Initializers:","text":"<ul> <li>Convenience initializers are secondary initializers provided by a class, structure, or enumeration.</li> <li>They are defined with the convenience modifier and are used to create an instance of the type in a simpler or more convenient way.</li> <li>Convenience initializers must call another initializer of the same type using self.init.</li> </ul> <pre><code>struct Point {\n    var x: Double\n    var y: Double\n\n    // Designated initializer\n    init(x: Double, y: Double) {\n        self.x = x\n        self.y = y\n    }\n\n    // Convenience initializer\n    init() {\n        self.init(x: 0.0, y: 0.0)\n    }\n\n    // Method to display information\n    func displayInfo() {\n        print(\"Point coordinates: (\\(x), \\(y))\")\n    }\n}\n\n// Creating instances using the designated and convenience initializers\nlet point1 = Point(x: 3.0, y: 5.0)     // Designated initializer\nlet origin = Point()                    // Convenience initializer\n\n// Accessing methods of the instances\npoint1.displayInfo()  // Output: Point coordinates: (3.0, 5.0)\norigin.displayInfo()  // Output: Point coordinates: (0.0, 0.0)\n</code></pre>"},{"location":"interview/initializer/#3-required-initializers","title":"3. Required Initializers:","text":"<ul> <li>Required initializers are initializers that must be implemented by all subclasses of a class.</li> <li>They are marked with the required modifier.</li> </ul> <pre><code>class Shape {\n    var name: String\n\n    // Required initializer\n    required init(name: String) {\n        self.name = name\n    }\n\n    // Method to display information\n    func displayInfo() {\n        print(\"Shape: \\(name)\")\n    }\n}\n\nclass Point: Shape {\n    var x: Double\n    var y: Double\n\n    // Designated initializer\n    init(x: Double, y: Double, name: String) {\n        self.x = x\n        self.y = y\n        super.init(name: name)\n    }\n\n    // Required initializer\n    required init(name: String) {\n        // Default coordinates for points\n        self.x = 0.0\n        self.y = 0.0\n        super.init(name: name)\n    }\n\n    // Method to display information\n    override func displayInfo() {\n        super.displayInfo()\n        print(\"Coordinates: (\\(x), \\(y))\")\n    }\n}\n\n// Creating instances using required initializers\nlet origin = Point(name: \"Origin\")\nlet point1 = Point(x: 3.0, y: 5.0, name: \"Point 1\")\n\n// Accessing methods of the instances\norigin.displayInfo()  // Output: Shape: Origin, Coordinates: (0.0, 0.0)\npoint1.displayInfo()  // Output: Shape: Point 1, Coordinates: (3.0, 5.0)\n</code></pre>"},{"location":"interview/initializer/#4-failable-initializers","title":"4. Failable Initializers:","text":"<ul> <li>Failable initializers are initializers that may fail to initialize an instance due to invalid input or other conditions.</li> <li>They are defined with the init? keyword.</li> <li>Failable initializers return an optional instance (Self? or Type?).</li> <li>If initialization fails, the initializer returns nil.</li> </ul> <pre><code>struct Point {\n    var x: Double\n    var y: Double\n\n    // Failable initializer\n    init?(x: Double, y: Double) {\n        // Check if the provided coordinates are valid\n        guard x.isFinite &amp;&amp; y.isFinite else {\n            return nil // Return nil if coordinates are not finite\n        }\n\n        self.x = x\n        self.y = y\n    }\n\n    // Method to display information\n    func displayInfo() {\n        print(\"Point coordinates: (\\(x), \\(y))\")\n    }\n}\n\n// Creating instances using the failable initializer\nif let validPoint = Point(x: 3.0, y: 5.0),\n   let invalidPoint = Point(x: Double.infinity, y: Double.nan) {\n    validPoint.displayInfo()   // Output: Point coordinates: (3.0, 5.0)\n    invalidPoint.displayInfo() // No output (instance creation failed)\n}\n</code></pre>"},{"location":"interview/initializer/#5-implicitly-unwrapped-failable-initializers","title":"5. Implicitly Unwrapped Failable Initializers:","text":"<ul> <li>Similar to failable initializers, these initializers return an optional instance (Self? or Type?).</li> <li>However, they are implicitly unwrapped, meaning you can use the instance without unwrapping it.</li> <li>They are defined with the init! keyword.</li> </ul>"},{"location":"interview/initializer/#6-convenience-failable-initializers","title":"6. Convenience Failable Initializers:","text":"<ul> <li>Convenience failable initializers combine the behavior of convenience and failable initializers.</li> <li>They are defined with the convenience init? keyword.</li> </ul>"},{"location":"interview/initializer/#7-required-failable-initializers","title":"7. Required Failable Initializers:","text":"<ul> <li>Similar to required initializers, these initializers are required to be implemented by all subclasses.</li> <li>They are defined with the required init? keyword.</li> </ul> <p>Let's grow together \ud83c\udf31</p> <p>Cheers \ud83c\udf7b</p>"},{"location":"logics/allCharactersPresent/","title":"Matching string characters","text":""},{"location":"logics/allCharactersPresent/#code","title":"Code","text":"<pre><code>func allCharactersPresent(_ str: String, _ str1: String) -&gt; Bool {\n    var charc = Array(str)\n    var charc1 = Array(str1)\n    var charPresent = false\n\n    for i in 0..&lt;charc.count {\n        charPresent = false\n        for j in 0..&lt;charc1.count {\n            if charc[i] == charc1[j] {\n                charc1[j] = \".\"\n                charPresent = true\n            }\n        }\n        if !charPresent {\n            return charPresent\n        }\n    }\n    return charPresent\n}\n</code></pre>"},{"location":"logics/allCharactersPresent/#example","title":"Example","text":"Test Case 1Test Case 2Test Case 3 <pre><code>// Example usage\nlet mainString = \"LG Soft India\"\nlet s1 = \"LGS\"\nprint(\"\\(allCharactersPresent(s1, mainString))\")\n</code></pre> <pre><code>// Example usage\nlet mainString = \"LG Soft India\"\nlet s1 = \"oLI\"\nprint(\"\\(allCharactersPresent(s1, mainString))\")\n</code></pre> <pre><code>// Example usage\nlet mainString = \"LG Soft India\"\nlet s1 = \"iIi\"\nprint(\"\\(allCharactersPresent(s1, mainString))\")\n</code></pre>"},{"location":"logics/allCharactersPresent/#output","title":"Output","text":"<pre><code>true\n</code></pre>"},{"location":"logics/allCharactersPresent/#output_1","title":"Output","text":"<pre><code>true\n</code></pre>"},{"location":"logics/allCharactersPresent/#output_2","title":"Output","text":"<pre><code>false\n</code></pre>"},{"location":"logics/charCountInString/","title":"Find Last Repeated Character in a string","text":"Example 1:Example 2: <p>Code     <pre><code>func getCharCountInString(_ testText:String) {\n    let dict = testText.reduce([:]) { (d, c) -&gt; Dictionary&lt;Character,Int&gt; in\n        var d = d\n        let i = d[c] ?? 0\n        d[c] = i+1\n        return d\n    }\n\n    //Accending order\n    print((dict.sorted{ $0.key &lt; $1.key }).map{ \"\\($0)\\($1)\"}.joined())\n    //Without Accending order\n    print((dict.map{ \"\\($0)\\($1)\"}).joined())\n}\n</code></pre> Example     <pre><code>// Example usage\ngetCharCountInString(testText)\n</code></pre> Output <pre><code>a4b2c1d4e4f2r2s3w3\ns3c1f2b2a4r2e4w3d4\n</code></pre></p> <p>Code     <pre><code>func getCharCountInString(_ testText:String) {\n    var charArray = Array(testText)\n    var charD = [Character:Int]()\n    for i in charArray {\n        if let count = charD[i] {\n            charD[i] = count + 1\n        } else {\n            charD[i] = 1\n        }\n    }\n\n    print(charD.compactMap{\"\\($0)\\($1)\"})\n}\n</code></pre> Example     <pre><code>// Example usage\ngetCharCountInString(testText)\n</code></pre> Output <pre><code>[\"a4\", \"b2\", \"e4\", \"f2\", \"c1\", \"s3\", \"d4\", \"r2\", \"w3\"]\n</code></pre></p>"},{"location":"logics/isPalindrome/","title":"Given string is Palindrome or not","text":"Using whileAnother way"},{"location":"logics/isPalindrome/#code","title":"Code","text":"<pre><code>func isPalindrome(_ string: String) -&gt; Bool {\n    let characters = Array(string.lowercased())\n    var left = 0\n    var right = characters.count - 1\n\n    while left &lt; right {\n        if characters[left] != characters[right] {\n            return false\n        }\n        left += 1\n        right -= 1\n    }\n\n    return true\n}\n</code></pre>"},{"location":"logics/isPalindrome/#example","title":"Example","text":"<pre><code>// Example usage\nprint(isPalindrome(\"mom\"))  // true\nprint(isPalindrome(\"Neveroddoreven\"))  // true\nprint(isPalindrome(\"test\"))  // false\n</code></pre>"},{"location":"logics/isPalindrome/#output","title":"Output","text":"<pre><code>true\ntrue\nfalse\n</code></pre>"},{"location":"logics/isPalindrome/#code_1","title":"Code","text":"<pre><code>func isPalindromeNew(_ input: String) -&gt; Bool {\n    let sanitizedInput = input.lowercased().replacingOccurrences(of: \"[^a-z0-9]\", with: \"\", options: .regularExpression)\n    return sanitizedInput == String(sanitizedInput.reversed())\n}\n</code></pre>"},{"location":"logics/isPalindrome/#example_1","title":"Example","text":"<pre><code>print(isPalindromeNew(\"racecar\"))  // true\nprint(isPalindromeNew(\"level\"))    // true\nprint(isPalindromeNew(\"hello\"))    // false\nprint(isPalindromeNew(\"A man, a plan, a canal: Panama\")) // true\n</code></pre>"},{"location":"logics/isPalindrome/#output_1","title":"Output","text":"<pre><code>true\ntrue\nfalse\ntrue\n</code></pre>"},{"location":"logics/lastRepeatedChar/","title":"Find Last Repeated Character in a string","text":""},{"location":"logics/lastRepeatedChar/#code","title":"Code","text":"<pre><code>func findLastRepeatedCharacter(_ input: String) -&gt; Character? {\n    var charDict: [Character: Int] = [:]\n\n    // Count the occurrence of each character\n    for char in input {\n        if let count = charDict[char] {\n            charDict[char] = count + 1\n        } else {\n            charDict[char] = 1\n        }\n    }\n\n    // Iterate through the characters in reverse order\n    for char in input.reversed() {\n        if let count = charDict[char], count &gt; 1 {\n            return char\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"logics/lastRepeatedChar/#example","title":"Example","text":"<pre><code>// Example usage\nlet inputString = \"Hello, playground\"\nif let lastRepeatedChar = findLastRepeatedCharacter(inputString) {\n    print(\"The last repeated character is: \\(lastRepeatedChar)\")\n} else {\n    print(\"No repeated characters found.\")\n}\n</code></pre>"},{"location":"logics/lastRepeatedChar/#output","title":"Output","text":"<pre><code>The last repeated character is: o\n</code></pre>"},{"location":"logics/secondLargeNumber/","title":"Find the second largest number and its Index","text":""},{"location":"logics/secondLargeNumber/#code","title":"Code","text":"<pre><code>func findSecondLargest(arr: [Int]) -&gt; (number: Int, index: Int)? {\n    var largest = Int.min\n    var secondLargest = Int.min\n    var largestIndex = -1\n    var secondLargestIndex = -1\n\n    for (index, num) in arr.enumerated() {\n        if num &gt; largest {\n            secondLargest = largest\n            secondLargestIndex = largestIndex\n            largest = num\n            largestIndex = index\n        } else if num &gt; secondLargest &amp;&amp; num != largest {\n            secondLargest = num\n            secondLargestIndex = index\n        }\n    }\n\n    // If a second largest number was found, return it along with its index\n    if secondLargestIndex != -1 {\n        return (number: secondLargest, index: secondLargestIndex)\n    } else {\n        return nil // No second largest number found\n    }\n}\n</code></pre>"},{"location":"logics/secondLargeNumber/#example","title":"Example","text":"<pre><code>// Example usage\nlet array = [5, 2, 18, 3, 4, 7, 1, 6, 3]\nif let result = findSecondLargest(arr: array) {\n    print(\"Second largest number: \\(result.number)\")\n    print(\"Index: \\(result.index)\")\n} else {\n    print(\"No second largest number found.\")\n}\n</code></pre>"},{"location":"logics/secondLargeNumber/#output","title":"Output","text":"<pre><code>Second largest number: 7\nIndex: 5\n</code></pre>"},{"location":"logics/sumOfEvenNumbers/","title":"Sum of Positive Even Numbers in Array","text":""},{"location":"logics/sumOfEvenNumbers/#code","title":"Code","text":"<pre><code>func sumOfPositiveEvenNumbers(_ numbers:[Int]) -&gt; Int {\n    var sum = 0\n\n    for num in numbers {\n        if num &gt; 0 &amp;&amp; num % 2 == 0 {\n            sum = sum + num\n        }\n    }\n    return sum\n}\n</code></pre>"},{"location":"logics/sumOfEvenNumbers/#example","title":"Example","text":"<pre><code>// Example usage\nlet arr = [1,2,3,4,5,6]\nprint(sumOfPositiveEvenNumbers(arr))\n</code></pre>"},{"location":"logics/sumOfEvenNumbers/#output","title":"Output","text":"<pre><code>12\n</code></pre>"},{"location":"logics/sumOfTwoIndex/","title":"Sum of two index in array &amp; its index","text":""},{"location":"logics/sumOfTwoIndex/#code","title":"Code","text":"<pre><code>func getIndexFromArray(_ arr: [Int],_ target: Int) -&gt; String {\n    var dic = [Int:Int]()\n    var output = \"\"\n    for i in 0 ..&lt; arr.count {\n        dic[arr[i]] = i\n        let val = target - arr[i]\n        let final = dic[val]\n        if final != nil {\n            output = output + \"\\n\" + \"\\(i),\\(final ?? 0)\"\n        }\n    }\n    return output\n}\n</code></pre>"},{"location":"logics/sumOfTwoIndex/#example","title":"Example","text":"<pre><code>// Example usage\nlet arr = [2,6,9,1,7,4,11]\nlet target = 10\nprint(getIndexFromArray(arr, target))\n</code></pre>"},{"location":"logics/sumOfTwoIndex/#output","title":"Output","text":"<pre><code>3,2\n5,1\n</code></pre>"},{"location":"logics/vowels/","title":"Sum of two index in array &amp; its index","text":""},{"location":"logics/vowels/#code","title":"Code","text":"<pre><code>func calculateNoOfVowelsAndConsonants(in string: String) -&gt; (vowels: Int, consonants: Int) {\n    let vowelsSet: Set&lt;Character&gt; = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowelCount = 0\n    var consonantCount = 0\n\n    for char in string.lowercased() {\n        if vowelsSet.contains(char) {\n            vowelCount += 1\n        } else if char.isLetter {\n            consonantCount += 1\n        }\n    }\n\n    return (vowels: vowelCount, consonants: consonantCount)\n}\n</code></pre>"},{"location":"logics/vowels/#example","title":"Example","text":"<pre><code>// Example usage\nlet inputString = \"Hello World\"\nlet counts = calculateNoOfVowelsAndConsonants(in: inputString)\n\nprint(\"Number of vowels: \\(counts.vowels)\")\nprint(\"Number of consonants: \\(counts.consonants)\")\n</code></pre>"},{"location":"logics/vowels/#output","title":"Output","text":"<pre><code>Number of vowels: 3\nNumber of consonants: 7\n</code></pre>"}]}